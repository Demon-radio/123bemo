1

Intro & install

If you'd like to use flags in client-rendered files or use Statsig's built-in analytics, you'll need to add a <StatsigProvider>.

The flags SDK also lets you 'Bootstrap' the Statsig SDK, which is a zero-latency method for fetching frontend feature flags.

Run npm install @statsig/react-bindings to get started.

2

Connect to a project

First, connect an existing project by running vercel link in your terminal, then click the "connect project" button.

3

Pull your latest environment variables

Run vercel env pull to make the latest environment variables available to your project locally.

4

Create dynamic-statsig-provider.tsx

Next, create dynamic-statsig-provider.tsx to setup our Statsig configuration. You can customize this code (for example, add/remove the web analytics plugin), but it should work without modification.


"use client";

import type { Statsig } from "@flags-sdk/statsig";
import {
  StatsigProvider,
  useClientBootstrapInit,
} from "@statsig/react-bindings";
import { StatsigAutoCapturePlugin } from '@statsig/web-analytics';
 
export function DynamicStatsigProvider({ children, datafile,}: {
  children: React.ReactNode;
  datafile: Awaited<ReturnType<typeof Statsig.getClientInitializeResponse>>;
}) {
  if (!datafile) throw new Error("Missing datafile");
 
  const client = useClientBootstrapInit(
    process.env.NEXT_PUBLIC_STATSIG_CLIENT_KEY as string,
    datafile.user,
    JSON.stringify(datafile),
    { plugins: [ new StatsigAutoCapturePlugin() ] } //Optional, will add autocaptured web analytics events to Statsig
  );
 
  return (
    <StatsigProvider user={datafile.user} client={client} >
      {children}
    </StatsigProvider>
  );
}
This file accepts values for a single user from code running on the server side, and adds them to a provider we can access in other client rendered content.

5

Add the Statsig Provider to layout.tsx

Next, add the provider we created to layout.tsx, to make the functionality available.


// layout.tsx

//add to the top of your file
import { statsigAdapter } from "@flags-sdk/statsig";
import { DynamicStatsigProvider } from "./dynamic-statsig-provider";

// ...any other code you may have

 const Statsig = await statsigAdapter.initialize();
 const datafile = await Statsig.getClientInitializeResponse({userID: "1234"}, {hash: "djb2",});
 // minimal example, you'll want to customize your user object, likely using the flags SDK's identify function

 return (
    <DynamicStatsigProvider datafile={datafile}>
      {/* your other elements & children */}
    </DynamicStatsigProvider>
 );
}

6

Use flags in dynamic/client files

Use Statsig's hooks to access feature flag/ experiment values in any client-rendered file


'use client';
// page.tsx, minimal example

import { useGateValue } from "@statsig/react-bindings";

export default function Home() {
  const gate = useGateValue("my_first_gate"); 

  return (
    <div>
      Gate Value: {gate ? 'PASSED' : 'FAILED'}
    </div>
  );
}